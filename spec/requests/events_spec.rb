 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/events", type: :request do
  let(:user) { User.create(email: "user@test.com", password: "test_pass") }
  let(:classroom) { Classroom.create(name: "test classroom") }
  
  let(:valid_attributes) {
    {
      title: "test event title",
      start_time: Time.now + 1.hour,
      end_time: Time.now + 2.hour,
      user_id: user.id,
      classroom_id: classroom.id
    }
  }

  let(:invalid_attributes) {
    {
      title: nil,
      start_time: nil,
      end_time: nil,
      user_id: nil,
      classroom_id: nil
    }
  }

  before(:each) do
    sign_in user
  end

  describe "GET /index" do
    it "renders a successful response" do
      Event.create! valid_attributes
      get events_url
      expect(response).to be_redirect
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      event = Event.create! valid_attributes
      get event_url(event)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_event_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      event = Event.create! valid_attributes
      get edit_event_url(event)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Event" do
        expect {
          post events_url, params: { event: valid_attributes }
        }.to change(Event, :count).by(1)
      end

      it "redirects to the created event" do
        post events_url, params: { event: valid_attributes }
        expect(response).to redirect_to(event_url(Event.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Event" do
        expect {
          post events_url, params: { event: invalid_attributes }
        }.to change(Event, :count).by(0)
      end

      it "renders a response with 422 status - unporcessable entity" do
        post events_url, params: { event: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:user2) { User.create(name: "test_user 2", password: "test_pass") }
      let(:classroom2) { Classroom.create(name: "test classroom 2") }
      let(:new_attributes) {
        {
          title: "test event title 2",
          start_time: Time.now + 2.hour,
          end_time: Time.now + 3.hour,
          user_id: user.id,
          classroom_id: classroom.id
        }
      }

      it "updates the requested event" do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: new_attributes }
        event.reload
        expect(event.title).to eq(new_attributes[:title])
        expect(event.user_id).to eq(new_attributes[:user_id])
        expect(event.classroom_id).to eq(new_attributes[:classroom_id])
      end

      it "redirects to the event" do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: new_attributes }
        event.reload
        expect(response).to redirect_to(event_url(event))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status - unporcessable entity" do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested event" do
      event = Event.create! valid_attributes
      expect {
        delete event_url(event)
      }.to change(Event, :count).by(-1)
    end

    it "redirects to the events list" do
      event = Event.create! valid_attributes
      delete event_url(event)
      expect(response).to redirect_to(events_url)
    end
  end
end
